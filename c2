using System.Collections.Generic;

namespace TextAnalysis
{
    static class FrequencyAnalysisTask
    {
        public static Dictionary<string, Dictionary<string, int>> GetBigrams(List<List<string>> text)
        {
            var bigrams = new Dictionary<string, Dictionary<string, int>>();
            foreach (var words in text)
            {
                ProcessSentenceForBigrams(words, bigrams);
            }
            return bigrams;
        }

        public static Dictionary<string, Dictionary<string, int>> GetTrigrams(List<List<string>> text)
        {
            var trigrams = new Dictionary<string, Dictionary<string, int>>();
            foreach (var words in text)
            {
                ProcessSentenceForTrigrams(words, trigrams);
            }
            return trigrams;
        }

        public static Dictionary<string, string> GetMostFrequentNextWords(List<List<string>> text)
        {
            var result = new Dictionary<string, string>();

            ProcessBigrams(text, result);
            ProcessTrigrams(text, result);

            return result;
        }

        private static void ProcessSentenceForBigrams(List<string> words,
Dictionary<string, Dictionary<string, int>> bigrams)
        {
            for (var i = 0; i < words.Count - 1; i++)
            {
                AddOrUpdateFrequency(bigrams, words[i], words[i + 1]);
            }
        }

        private static void ProcessSentenceForTrigrams(List<string> words,
 Dictionary<string, Dictionary<string, int>> trigrams)
        {
            for (var i = 0; i < words.Count - 2; i++)
            {
                var key = words[i] + " " + words[i + 1];
                AddOrUpdateFrequency(trigrams, key, words[i + 2]);
            }
        }

        private static void AddOrUpdateFrequency(Dictionary<string,
 Dictionary<string, int>> frequencyDict, string key, string nextWord)
        {
            if (!frequencyDict.ContainsKey(key))
            {
                frequencyDict.Add(key, new Dictionary<string, int>());
            }
            if (!frequencyDict[key].ContainsKey(nextWord))
            {
                frequencyDict[key].Add(nextWord, 1);
            }
            else
            {
                frequencyDict[key][nextWord] += 1;
            }
        }

        private static void ProcessBigrams(List<List<string>> text,
Dictionary<string, string> result)
        {
            var bigrams = GetBigrams(text);
            foreach (var firstWord in bigrams)
            {
                var mostFrequentNextWord = FindMostFrequentNextWord(firstWord.Value);
                result.Add(firstWord.Key, mostFrequentNextWord);
            }
        }

        private static void ProcessTrigrams(List<List<string>> text,
Dictionary<string, string> result)
        {
            var trigrams = GetTrigrams(text);
            foreach (var wordPair in trigrams)
            {
                var mostFrequentNextWord = FindMostFrequentNextWord(wordPair.Value);
                result.Add(wordPair.Key, mostFrequentNextWord);
            }
        }

        private static string FindMostFrequentNextWord(Dictionary<string, int> nextWords)
        {
            var maxValue = 0;
            string mostFrequentWord = null;

            foreach (var nextWord in nextWords)
            {
                if (nextWord.Value == maxValue)
                {
                    if (string.CompareOrdinal(mostFrequentWord, nextWord.Key) > 0)
                    {
                        mostFrequentWord = nextWord.Key;
                    }
                }

                if (nextWord.Value > maxValue)
                {
                    mostFrequentWord = nextWord.Key;
                    maxValue = nextWord.Value;
                }
            }

            return mostFrequentWord;
        }
    }
}
